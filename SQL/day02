--일자연습
select sysdate, hire_date,
       floor((sysdate-hire_date)/365)년도1 , 
       floor(months_between(sysdate, hire_date)/12) 년도2,
       add_months(sysdate, 1) "1개월 후",
       last_day(hire_date) 마지막일,
       next_day(hire_date, '수요일') 처음오는요일,
       round(hire_date, 'month') 반올림, --16을 기준으로 한다
       trunc(hire_date, 'month') 버림,  --월까지만 본다
       first_name, salary
from employees;
--where
--order by


--형변환
select sysdate, to_char(sysdate, 'yyyy/mm/dd hh:mi:ss DAY DY MON, AM'),
        to_char(1000000000,'L999,9999,999'),
        to_date(20220101,'YYYYMMDD')  --날짜 표현
from dual;  --하나만 출력하려면

select first_name, hire_date
from employees
where hire_date = to_date('030617','rrmmdd');

--nls_date_format설정을 바꿀수있다. alter session set nls_date_format='';
--rr/mm/dd rrmmdd rr은 50이상이면 19가 붙고, 미만이면 20
select first_name, hire_date
from employees
where hire_date = '03/06/17';

select first_name, hire_date
from employees
where hire_date = '030617';

select first_name, hire_date
from employees
where hire_date = '20030617';

select * from v$nls_parameters;
select * from nls_session_parameters;

select first_name, hire_date, salary, commission_pct, 
        salary+salary*nvl(commission_pct,0) 실수령액,   --nvl null이면 0으로 대체
        salary+salary*nvl2(commission_pct, commission_pct, 0) 실수령액2,  --nvl2(널판단, 널이 아닐때, 널일때)
        nvl2(commission_pct, '커미션있음','커미션없음')"nvl2연습"
from employees
order by commission_pct ;  --nulls first;널 먼저나오게


--7. 모든 사원은 자신의 상관(MANAGER)이 있다.
--하지만 EMP 테이블에 유일하게 상관이 없는 로우가 있는데 그 사원의 MGR 칼럼 값이 NULL이다. 
--상관이 없는 사원만 출력하되 MGR 칼럼 값 NULL 대신 CEO로 출력해 봅시다. 
--manage_id가 null이면 사장이다.
select first_name, manager_id,
    nvl(to_char(manager_id), 'CEO')"nvl연습",
    nvl2(manager_id, to_char(manager_id), 'CEO')"nvl2연습",--한 칼럼에 형은 동일해야하므로 형변환 필요
    department_id, nvl(to_char(department_id),'부서없음')"nvl연습",
    decode(department_id,10,'A',60,'B',90,'C','D') "부서decode",  --if역할, 단 같다 밖에 비교가 안됨
    salary, case when salary>=10000 then '매우많음'  --값은 '', 칼럼 명은 ""
                 when salary>=7000 then '많음'
                 when salary>=5000 then '기본'
                 else '적음'
                 end "case연습",   --if-else if-else 역할
    case when first_name like 'A%' then 'A로 시작' else '아님' end "case연습2" , 
    case when first_name like '%a' then 'a로 끝난다' else '아님' end "case연습3"
from employees;


--------Group
--집계함수(컬럼이름) : null값은 무시하고 계산
--집계함수(*) : null값 포함
--group by절이 없으면 전체에 대한 집계
select sum(salary), sum(commission_pct) , avg(salary), count(salary), sum(salary)/count(salary),
    count(salary), count(*)전체건수, count(commission_pct), count(manager_id)
from employees;


--1. 가장 최근에 입사한 사원의 입사일과 입사한지 가장 오래된 사원의 입사일을 출력하는 쿼리문을 작성하시오. 
select max(hire_date)가장최근, min(hire_date)가장오래
from employees;


--2.80번 부서 소속 사원중에서 커미션을 받는 사원의 수를 구해보시오.
select count(commission_pct)
from employees
where department_id = 80;
--and commission_pct is not null;  어차피 null값은 세지 않는다.

select count(distinct(job_id)) 업무종류수, count(job_id)업무수, count(distinct department_id)부서수  --distinct 중복제거
from employees;

select distinct department_id
from employees
where department_id is not null;

--부서별 salary평균
--select절에 집계함수를 사용하지 않는 칼럼이 있다면 반드시 group by절에 속해야함
select department_id,max(job_id), avg(salary)
from employees
where department_id<=110
group by department_id
order by 1;

--having : group에 대한 조건절
select department_id,job_id, avg(salary)avg_sal  --5
from employees  --1
where department_id<=110  --where절에서는 그룹함수를 쓸 수 없음  --2
group by department_id, job_id --3
having avg(salary)>=10000  --4
order by avg_sal desc;  --6

select department_id, max(salary), min(salary)
from employees
group by department_id;

select *
from employees
where department_id = 10;

--7. 각 부서별 인원수를 조회하되 인원수가 5명 이상인 부서만 출력되도록 하시오.
select department_id, count(first_name)인원수
from employees
group by department_id
having count(first_name)>=5;


--8. 각 부서별 최대급여와 최소급여를 조회하시오.
--   단, 최대급여와 최소급여가 같은 부서는 직원이 한명일 가능성이 높기때문에 
--   조회결과에서 제외시킨다.
select department_id, max(salary)최대급여,min(salary)최소급여
from employees
group by department_id
having max(salary)<>min(salary);
having count(*)>1;



   
--9. 부서가 50, 80, 110 번인 직원들 중에서 급여를 5000 이상 24000 이하를 받는
--   직원들을 대상으로 부서별 평균 급여를 조회하시오.
--   다, 평균급여가 8000 이상인 부서만 출력되어야 하며, 출력결과를 평균급여가 높은
--    부서면저 출력되도록 해야 한다.
select department_id, avg(salary)
from employees
where department_id in(50,80,110) and salary between 5000 and 24000
group by department_id
having avg(salary) >=8000
order by avg(salary) desc;


select * from employees;

create table JJ(id number primary key, name varchar2(20));
insert into JJ values(1,'AA');
insert into JJ values(2,'BB');
select* from JJ;
update JJ set id = 100 where id=1;


--100번 직원의 근무하는 부서이름을 알고싶다
select * 
from employees
where employee_id = 100;

select * 
from departments
where department_id = 90;

--조인 사용
--직원이 부서를 참조한다(건수는 직원 건수만큼 나온다)

--DB vendor문법
select employee_id, first_name, department_name, departments.department_id
from employees, departments  --크로스 조인
where employees.department_id = departments.department_id(+)  --(+)outer조인
order by 1;

--join하고자하는 칼럼이 일치하는 경우 사용
--inner join
select employee_id, first_name, department_name, department_id
from employees join departments using(department_id);

--join하고자하는 칼럼이 일치하지 않는 경우 사용
--inner join
select employee_id, first_name, department_name, departments.department_id
from employees join departments on(employees.department_id = departments.department_id);

--left outer join
select employee_id, first_name, department_name, departments.department_id
from employees left outer join departments on(employees.department_id = departments.department_id);

--full outer join
select employee_id, first_name, department_name, departments.department_id
from employees full outer join departments on(employees.department_id = departments.department_id);



--직원이 어떤 직급인지 자세히 알고자한다. job_title, max_salary, min_salary
desc employees;
desc jobs;

--pk : null이 불가, unique
--fk : 참조키, 다른테이블 혹은 자신의 테이블의 pk를 참조한다.
select employees.first_name, employees.salary, jobs.*
from employees, jobs
where employees.job_id = jobs.job_id;

select employees.first_name, employees.salary, job_id, job_title, max_salary, min_salary
from employees join jobs using(job_id);

--table 이름의 별명 가능하다
select emp.first_name, emp.salary, j.*
from employees emp join jobs j on(emp.job_id = j.job_id)
where emp.job_id = 'IT_PROG';

--Seattle에서 근무하는 사원의 이름과 급여를 출력하시오.
select emp.first_name, emp.job_id, emp.salary, l.city, de.department_name, de.department_id
from employees emp, departments de, locations l
where emp.department_id = de.department_id
 and de.location_id = l.location_id
 and l.city = 'Seattle';

--using
select first_name, job_id, salary, city, department_name, department_id
from employees join departments using(department_id)
                    join locations  using(location_id)
where city = 'Seattle';

--on
select employees.first_name, employees.job_id, employees.salary, locations.city, departments.department_name, departments.department_id
from employees join departments on(employees.department_id = departments.department_id)
                    join locations  on(departments.location_id = locations.location_id)
where locations.city = 'Seattle';


--ACCOUNTING 부서 소속 사원의 이름과 입사일을 출력하시오.
select first_name, hire_date, department_name
from departments join employees using(department_id)
where department_name = initCap('Accounting');


1.직원들의 이름과 직급명(job_title)을 조회하시오.
select employees.first_name, jobs.job_title
from employees, jobs
where employees.job_id = jobs.job_id;


2.부서이름과 부서가 속한 도시명(city)을 조회하시오.
select departments.department_name, locations.city
from departments, locations
where departments.location_id = locations.location_id;


3. 직원의 이름과 근무국가명을 조회하시오. (employees, departments, locations,countries)
select first_name, country_name
from employees join departments using(department_id)
                    join locations  using(location_id)
                    join countries using(country_id);



4. 직책(job_title)이 'manager' 인 사람의 이름, 직책, 부서명을 조회하시오.
select first_name, job_title, department_name
from employees join jobs using(job_id)
        join departments using(department_id)
where lower(job_title) like lower('%manager');




5. 직원들의 이름, 입사일, 부서명을 조회하시오.
select employees.first_name, employees.hire_date, departments.department_name
from employees join departments on employees.department_id = departments.department_id;

select * from employees;

6. 직원들의 이름, 입사일, 부서명을 조회하시오.
단, 부서가 없는 직원이 있다면 그 직원정보도 출력결과에 포함시킨다.
select employees.first_name, employees.hire_date, departments.department_name
from employees left outer join departments on employees.department_id = departments.department_id;

select * from jobs;

7. 직원의 이름과 직책(job_title)을 출력하시오.
단, 사용되지 않는 직책이 있다면 그 직책정보도 출력결과에 포함시키시오.
select employees.first_name, jobs.job_title
from employees right outer join jobs on employees.job_id  = jobs.job_id;


