select * from jobs;

--None equi join(=이외의 연산자를 이용해서 조인)
create table salgrade(grade char(1) primary key, minsal number, maxsal number);

insert into salgrade values('A', 0,5000);
insert into salgrade values('B', 5001,15000);
insert into salgrade values('C', 15001,20000);
insert into salgrade values('D', 20001,30000);
commit;

select * from salgrade;

--직원이름과 급여와 급여등급 출력
select e.first_name, e.salary, s.grade
from employees e, salgrade s
where e.salary between s.minsal and s.maxsal;

select first_name, salary, grade
from employees join salgrade on(salary between minsal and maxsal);

select * from employees;

--직원과 직원을 관리하는 매니저 출력
--self join
select 직원.employee_id,직원.first_name,매니저.employee_id, 매니저.first_name
from employees 직원, employees 매니저
where 직원.manager_id = 매니저.employee_id(+)  --outer join 오라클 문법
order by 1;

--outer join
select 직원.employee_id,직원.first_name,매니저.employee_id, 매니저.first_name
from employees 직원 left outer join employees 매니저 on(직원.manager_id = 매니저.employee_id);

--매니저가 KING인 사원들의 이름과 직급을 출력하시오.
select emp.first_name, emp.last_name, emp.manager_id, jobs.job_title
from employees emp, employees m, jobs
where emp.manager_id = m.employee_id
and emp.job_id = jobs.job_id
and m.last_name = 'King';

--서브 쿼리(쿼리 안에 쿼리)
--king의 직원 id 알아내기
select * 
from employees
where manager_id = (select employee_id from employees
                    where first_name = 'Steven' and last_name = 'King');


--Steven King과 동일한 부서에서 근무하는 사원의 이름을 출력하시오
--1.Steven King의 부서
--2. 직원의 근무지
select * from countries;
select * from locations;

--self join
select em.employee_id, em.first_name, em.last_name
from employees em, employees st
where em.department_id = st.department_id
and st.first_name = 'Steven' and st.last_name = 'King';

--subquery
select *
from employees
where department_id = (select department_id from employees
where first_name = 'Steven' and last_name = 'King');

select * from employees
where first_name = 'Steven' and last_name = 'King';

--부서와 직원
desc departments;
select * from departments;

--부서 정보 출력, manager_id는 부서장 의미, 부서장은 직원 중 1인이다.(부서장이름,급여, 입사일)
select de.*, em.first_name, em.salary, em.hire_date
from departments de, employees em
where de.manager_id  = em.employee_id;

--부서장이 없는 경우도 출력에 포함
select de.*, em.first_name, em.salary, em.hire_date
from departments de, employees em
where de.manager_id  = em.employee_id(+);

select de.*, em.first_name, em.salary, em.hire_date
from departments de left outer join employees em on(de.manager_id  = em.employee_id);

--full join 연습
--부서 정보 출력, 부서가 없는 직원 포함, 직원이 없는 부서 포함
select *
from employees full join departments using(department_id);

--SCOTT와 동일한 직급을 가진 사원을 출력하는 SQL 문을 작성해 보시오. 
--서브쿼리에서 서브쿼리의 결과가 단일행인지 다중행인지 주의....단일행 연산자(=,<,>), 다중행 연산자(in)
select *
from employees
where job_id =ANY (select job_id
                from employees
                where first_name = 'Alexander');

select job_id
from employees
where first_name = 'Neena';

--Neena의 급여와 동일하거나 더 많이 받는 사원 명과 급여를 출력하시오.
--subquery결과가 1건이면 단일행 연산자를 사용 =,>, >=, <, <=
--subquery결과가 1건이면 다중행 연산자를 사용 in, >=ALL, >ALL, >=ANY, >ANY
select * 
from employees
where salary >=ANY(select salary  --ALL, ANY붙이면 다중행 연산 가능
                from employees
                where first_name = 'Alexander');   --9000, 3100

select salary
from employees
where first_name = 'Neena';


-- Seattle에서 근무하는 사원의 이름, 부서 번호를 출력하시오. (18명)
SELECT FIRST_NAME, LAST_NAME, SALARY, DEPARTMENT_ID
FROM EMPLOYEES JOIN DEPARTMENTS USING(DEPARTMENT_ID) 
                JOIN LOCATIONS using(LOCATION_ID)
where city = 'Seattle';


SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (select department_id
                        from departments
                        where location_id = (select location_id
                                             from locations
                                                where city = 'Seattle'));


select department_id
from departments
where location_id = (select location_id
                    from locations
                    where city = 'Seattle');

select location_id
from locations
where city = 'Seattle';

--IT부서에서 근무하는 모든 사원의 이름과 급여를 출력하시오.
select first_name, salary, department_id
from employees
where department_id = (select department_id
                        from departments
                        where department_name = 'IT');

select department_id
from departments
where department_name = 'IT';

--직속상관이 KING인 사원의 이름과 급여를 출력하시오.
select first_name, salary
from employees
where manager_id in (select employee_id
                    from employees
                    where last_name = 'King');

select employee_id
from employees
where last_name = 'King';

--평균 급여를 구하는 쿼리문을 서브 쿼리로 사용하여 평균 급여보다 더 많은 급여를 받는 사원을 검색하는 문장은 다음과 같습니다. 
select * 
from employees
where salary >= (select avg(salary) from employees);

select * 
from employees
where salary >= any(select avg(salary) from employees group by department_id);

--부서별로 가장 급여를 많이 받는 사원의 정보(사원 번호, 사원이름, 급여, 부서번호)를 출력하시오.(IN 연산자 이용)
--다중칼럼 서브쿼리
select *
from employees
where (department_id, salary)in ( select department_id, max(salary)
                                    from employees
                                    group by department_id);


select count(distinct department_id)
from employees;

select department_id, max(salary)
from employees
group by department_id;



select avg(salary)
from employees;


--직급(JOB)이 MANAGER인 사람의 속한 부서의 부서 번호와 부서명과 지역을 출력하시오.
select first_name, department_id, department_name, city
from employees join departments using(department_id)
                join locations using(location_id)
where job_id in(select job_id 
                from jobs
                where job_title like '%Manager%');


select * 
from jobs
where job_title like '%Manager%';

select rowid,employee_id, first_name
from employees;



create table tbl_test1(id number, name varchar(20), gender char(1), year01 interval year(3) to month);


insert into tbl_test1 values(1,'abc','M',interval '36' month(3));
insert into tbl_test1 values(2,'def','F',interval '12' month(3));

select id, name, gender, sysdate+year01 from tbl_test1;

select *
from tbl_test1
where name = 'abc';



create table tbl_emp4
as
select employee_id, first_name from employees
where 1=0;

select * from tbl_emp4;

desc tbl_emp4;
alter table tbl_emp4 add(job_id varchar2(50));
alter table tbl_emp4 modify(job_id varchar2(100));  --늘리는건 되지만, 데이터가 이미 들어간 상태에서 줄이는 것은 불가

--데이터가 있어도 지워진다.
alter table tbl_emp4 drop column first_name;

insert into tbl_emp4 values(1, '12345678901234567890','ABC');

drop table tbl_emp4;

desc tb1_emp3;
select * from tbl_emp2;
--truncate table tbl_emp2; 원상복구 불가

select *from tbl_emp;
delete form tbl_emp;
rollback();  -- 원상복구 가능

rename tbl_emp to tbl_employee;

desc tbl_employee;

--딕셔너리뷰
select *
from user_tables;

select *
from all_table;

select *
from dba_tables;



--제약조건은 복사안됨
create table tbl_emptest
as
select employee_id, first_name, salary, hire_date
from employees
where department_id = 60;

desc tbl_emptest;

--null허용
insert into tbl_emptest values(1,'AA',1000,sysdate);
insert into tbl_emptest(employee_id, first_name,hire_date) values(2,'BB',sysdate);
insert into tbl_emptest(employee_id,hire_date) values(2,sysdate-1);
insert into tbl_emptest(hire_date) values(sysdate-1);
select * from tbl_emptest;

--칼럼의 값을 넣지 않으면 암시적으로 null이다
--명시적으로 null값 넣을 수 있다.
insert into tbl_emptest(employee_id, first_name,hire_date) values(4,null,sysdate);
insert into tbl_emptest(employee_id, first_name,hire_date) values(5,'',sysdate);  --빈문자도 null


--table의 구조만들기
create table tbl_dept
as
select * from departments where 1=0;

desc tbl_dept;
select * from tbl_dept;


insert into tbl_dept
select employee_id, first_name, 100, 1700 from employees;


-----백업
create table tbl_emp_update
as
select * from employees;

select * from tbl_emp_update;

update tbl_emp_update set salary = salary*1.1
where department_id = 50;

--transaction처리를 하는 명령어(transaction : 하나의 논리적인 작업_
rollback;  --작업을끝내고 db에 반영안함
commit;  --작업을 끝내고 db에 반영한다.

--부서가 90번인직원들을
--Diana직원과 같은 부서, 같은 salary로 변경한다.

select department_id
from employees
where first_name = 'Diana';

update tbl_emp_update
set department_id=(select department_id
                    from employees
                    where first_name = 'Diana'), 
    salary = (select salary
                from employees
                where first_name = 'Diana')
where department_id = 90;

delete from tbl_emp_update
where department_id = (select department_id
                    from employees
                    where first_name = 'Diana');
                    
select * from tbl_emp_update;



drop table EMP01;
drop table EMP02;
create table EMP01
as
select employee_id empno, first_name ENAME, job_id JOB, manager_id MGR,
          hire_date HIREDATE, salary SAL, commission_pct COMM, department_id DEPTNO
from employees
where department_id = 60;
commit;
--EMP02에 있는 1건 수정하기
select * from emp02;
select * from emp01;

update emp02 set  job='aa' , SAL = 9999, comm = 0.1, deptno=88
where empno=103;

--EMP02에 신규를 삽입하기
insert into emp02 values(111,'jj','bb',100, sysdate, 8888,0.2, 77);
MERGE INTO EMP01
USING EMP02 ON(EMP01.EMPNO=EMP02.EMPNO)
WHEN MATCHED THEN
        UPDATE SET
        EMP01.ENAME=EMP02.ENAME,
        EMP01.JOB=EMP02.JOB,
        EMP01.MGR=EMP02.MGR,
        EMP01.HIREDATE=EMP02.HIREDATE,
        EMP01.SAL=EMP02.SAL,
        EMP01.COMM=EMP02.COMM,
        EMP01.DEPTNO=EMP02.DEPTNO
WHEN NOT MATCHED THEN
        INSERT VALUES(EMP02.EMPNO, EMP02.ENAME, EMP02.JOB,
        EMP02.MGR, EMP02.HIREDATE, EMP02.SAL,
        EMP02.COMM, EMP02.DEPTNO);
select * from EMP01;

--EMP02에 있는 1건 수정하기
--EMP02에 신규 삽입하기


select * from employees;







--Lab4
--========================================
--		SubQuery
--========================================
--1. 'IT'부서에서 근무하는 직원들의 이름, 급여, 입사일을 조회하시오.
select first_name , salary, hire_date
from employees
where department_id = (select department_id from departments
                        where department_name = 'IT');
                        
                        
select first_name, salary, hire_date, department_id
from employees join departments using(department_id)
where department_name = 'IT';

--2. 'Alexander' 와 같은 부서에서 근무하는 직원의 이름과 부서id를 조회하시오.
select first_name, department_id
from employees
where department_id = any(select department_id from employees
                    where first_name = 'Alexander');
--where department_id in(select department_id from employees
--                    where first_name = 'Alexander');




--3. 80번부서의 평균급여보다 많은 급여를 받는 직원의 이름, 부서id, 급여를 조회하시오.
--서브쿼리(where 안 쿼리)
select first_name, department_id, salary
from employees
where salary >(select avg(salary )from employees
                where department_id = 80);


--스칼라뷰(select 안 쿼리)
select first_name, department_id, salary, (select avg(salary )from employees
                                             where department_id = 80)
from employees
where salary >(select avg(salary )from employees
                where department_id = 80);

--인라인 뷰(from 안 쿼리)
select first_name, department_id, salary,dept80.sal80
from employees, (select avg(salary )sal80 from employees
                where department_id = 80) dept80
where salary> dept80.sal80;

--4. 'South San Francisco'에 근무하는 직원의 최소급여보다 급여를 많이 받으면서 
--50 번부서의 평균급여보다 많은 급여를 받는 직원의 이름, 급여, 부서명, 
--부서id를 조회하시오.
select first_name, salary, department_name, department_id
from employees left outer join departments using(department_id)
where salary > (select avg(salary) from employees where department_id = 50)
and salary > (select min(salary) from employees, locations where locations.city = 'South San Francisco'); 


-- LAB5

-- 1.직원의 이름과 관리자 이름을 조회하시오.
select em.first_name as "직원이름", m.first_name as "관리자"
from employees em, employees m
where em.manager_id = m.employee_id;

--2. 직원의 이름과 관리자 이름을 조회하시오.
--관리자가 없는 직원정보도 모두 출력하시오.
select e.first_name as "직원이름", m.first_name as "관리자"
from employees e left outer join employees m on(e.manager_id = m.employee_id);

--3. 관리자 이름과 관리자가 관리하는 직원의 수를 조회하시오.
--단, 관리직원수가 3명 이상인 관리자만 출력되도록 하시오.
select m.first_name, count(*)
from employees e, employees m
where e.manager_id = m.employee_id
group by m.first_name
having count(*) >=3;


select count(first_name)
from employees;

--Lab6
--1. 직원들의 이름, 입사일, 부서명을 조회하시오.
--단, 부서가 없는 직원이 있다면 그 직원정보도 출력결과에 포함시킨다.
--그리고 부서가 없는 직원에 대해서는 '<부서없음>' 이 출력되도록 한다.
--(outer-join , nvl() )

select first_name, hire_date, nvl(department_name,'<부서없음>') department_name
from employees left outer join departments using(department_id);

--2. 직원의 직책에 따라 월급을 다르게 지급하려고 한다.
--직책에 'Manager'가 포함된 직원은 급여에 0.5를 곱하고
--나머지 직원들에 대해서는 원래의 급여를 지급하도록 한다. 
--적절하게 조회하시오. (decode)
select first_name, job_id, salary,
decode(substr(job_title, -7,7),'Manager',salary*0.5, salary) salary2,
case when job_title like '%Manager%' then salary*0.5 else salary end salary3
from employees join jobs using(job_id);

create table emmBackup
as
select *from employees;

select * from emmBackup;

update empBackup
set salary =    salary*0.5
where employee_id in ( select employee_id
                                    from empBackup join jobs using(job_id)
                                    where substr(job_title,-7,7) = 'Manager'
                                    )
;

--3. 각 부서별로 최저급여를 받는 직원의 이름과 부서id, 급여를 조회하시오.
select first_name, department_id, salary
from employees
where (department_id, salary) in ( 
select department_id, min(salary)
from employees
group by department_id);

-- 4번
-- 각 직급별(job_title) 인원수를 조회하되 사용되지 않은 직급이 있다면 해당 직급도 출력결과에 포함시키시오. 
-- 그리고 직급별 인원수가 3명 이상인 직급만 출력결과에 포함시키시오.
select job_title, count(*)인원수
from employees join jobs using(job_id)
group by job_title
having count(*) >= 3;

​
-- 5번
-- 각 부서별 최대급여를 받는 직원의 이름, 부서명, 급여를 조회하시오.
select first_name, department_name, salary
from employees join departments using(department_id)
where (department_id, salary) in ( 
                            select department_id, max(salary)
                            from employees
                            group by department_id);
​
-- 6번
-- 직원의 이름, 부서id, 급여를 조회하시오. 그리고 직원이 속한 해당 부서의 최소급여를 마지막에 포함시켜 출력 하시오.
select first_name, department_id, salary, (
select min(salary) from employees emp2
where emp2.department_id = emp1.department_id) 최소급여
from employees emp1;

--
